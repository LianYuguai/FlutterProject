def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion
//    ndk {
//        //选择要添加的对应cpu类型的.so库。此处仅为示意，推送支持所有主流类型，请根据设备硬件选择
//        abiFilters 'armeabi', 'x86'
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        //解决第三方so依赖冲突 merge（合并）  pickFirst（选取第一个）
        //如果合并不能解决问题就选择其中一个
//        merge 'META-INF/proguard/androidx-annotations.pro'
//        merge 'META-INF/proguard/coroutines.pro'
//        merge 'lib/arm64-v8a/libc++_shared.so'
//        merge 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.oseasy.emp_mobile"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        debug  {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
        debug {
            signingConfig signingConfigs.debug
            // ndk {
            //     // 这里要加上，否则debug包会出问题,后面两个为可选，x86建议加上不然部分模拟器回报错
            //     abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86"
            // }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            def version = variant.versionName // 版本号
            def buildType = variant.name // 包类型，debug 还是 release
            def createTime = new Date().format('yyyyMMddHHmmss') // 打包时间 2021_09_25_16_45_52

            // outputFileName = "OS-Easy_Mobile_${buildType}_${version}_${createTime}.apk"
            outputFileName = "emp-mobile-${defaultConfig.versionName}-${createTime}.apk"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.aliyun.ams:alicloud-android-push:3.1.3'
    implementation 'com.aliyun.ams:alicloud-android-third-push-huawei:3.8.7'
    // 华为定位
    implementation 'com.huawei.hms:location:6.12.0.300'
}

apply plugin: 'com.aliyun.ams.emas-services'
apply plugin: 'com.huawei.agconnect'